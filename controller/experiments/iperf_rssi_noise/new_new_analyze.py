#!/usr/bin/env python3

usage="""
./analyze.py <dir name> 
Where <dir name> is the directory generated by rssi_noise_deployment.sh
"""

# import pdb
import sys, os, subprocess, json, traceback
import pprint
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

import pdb

routers = {
    "spitz0":{
        "mac":"94:83:c4:a0:23:e2",
        "color":"tab:blue"
    },
    "spitz1":{
        "mac":"94:83:c4:a0:21:9a",
        "color":"tab:orange"
    },
    "spitz2":{
        "mac":"94:83:c4:a0:21:4e",
        "color":"tab:green"
    },
    "spitz3":{
        "mac":"94:83:c4:a0:23:2e",
        "color":"tab:brown"
    },
    "spitz4":{
        "mac":"94:83:c4:a0:1e:a2",
        "color":"tab:red"
    },
}

################################################
# Utils # MAY not be needed as the generated data already has hostnames now

def getNameFromMac(mac):
    for i in routers:
        if routers[i]["mac"] == mac:
            return i
    return "error"

def getMacFromName(name):
    return routers[name]["mac"]

################################################

# Data json files are snapshots of the iw command. we need to normalize the tx/rx retries/fails etc. 
# This fn returns an array of each station dump file, with the format like so:
# {'globalTs': 1720175631.07416,
#  'noise': -91,
#  'peerData': {'spitz0': {'rssi': -90,
#                          'txFailsSinceLast': 0,
#                          'txRetriesSinceLast': 0},
#               'spitz1': {'rssi': -97,
#                          'txFailsSinceLast': 0,
#                          'txRetriesSinceLast': 0},
#               'spitz2': {'rssi': -72,
#                          'txFailsSinceLast': 27,
#                          'txRetriesSinceLast': 27},
#               'spitz3': {'rssi': -95,
#                          'txFailsSinceLast': 0,
#                          'txRetriesSinceLast': 0}},
#  'trialNum': 998},
def newParseStationDumps(dirname):
    origPwd = os.getcwd()
    me = dirname # expects dirname to be 'spitz0' 'spitz1' ...
    os.chdir(dirname)

    initTxRetryValues = {}
    lastTxRetryValues = {}

    initTxFailValues = {}
    lastTxFailValues = {}
    
    initTxPacketsValues = {}
    lastTxPacketsValues = {}

    initRxPacketsValues = {}
    lastRxPacketsValues = {}

    results = []

    for trialFile in sorted(os.listdir()): # Go thru all trial files in the directory
        if "stationdump" not in trialFile:
            continue

        f = open(trialFile)
        datapoint = json.load(f)
        # print(datapoint)
        f.close()
        
        for peer in datapoint["station_dump"]:
            # Log first values 
            if (peer not in initTxRetryValues):
                initTxRetryValues[peer] = datapoint["station_dump"][peer]["tx_retries"]
                lastTxRetryValues[peer] = datapoint["station_dump"][peer]["tx_retries"]
                
                initTxFailValues[peer] = datapoint["station_dump"][peer]["tx_failed"]
                lastTxFailValues[peer] = datapoint["station_dump"][peer]["tx_failed"]

                initTxPacketsValues[peer] = datapoint["station_dump"][peer]["tx_packets"]
                lastTxPacketsValues[peer] = datapoint["station_dump"][peer]["tx_packets"]

                initRxPacketsValues[peer] = datapoint["station_dump"][peer]["rx_packets"]
                lastRxPacketsValues[peer] = datapoint["station_dump"][peer]["rx_packets"]

            txRetriesSinceBeginning = datapoint["station_dump"][peer]["tx_retries"] - initTxRetryValues[peer] 
            txRetriesSinceLast = datapoint["station_dump"][peer]["tx_retries"] - lastTxRetryValues[peer]

            txFailsSinceBeginning = datapoint["station_dump"][peer]["tx_failed"] - initTxFailValues[peer]
            txFailsSinceLast = datapoint["station_dump"][peer]["tx_failed"] - lastTxFailValues[peer]
            
            txPacketsSinceBeginning = datapoint["station_dump"][peer]["tx_packets"] - initTxPacketsValues[peer]
            txPacketsSinceLast = datapoint["station_dump"][peer]["tx_packets"] - lastTxPacketsValues[peer]

            rxPacketsSinceBeginning = datapoint["station_dump"][peer]["rx_packets"] - initRxPacketsValues[peer]
            rxPacketsSinceLast = datapoint["station_dump"][peer]["rx_packets"] - lastRxPacketsValues[peer]

            # Log prev iteration values
            lastTxRetryValues[peer] = datapoint["station_dump"][peer]["tx_retries"]
            lastTxFailValues[peer] = datapoint["station_dump"][peer]["tx_failed"]
            lastTxPacketsValues[peer] = datapoint["station_dump"][peer]["tx_packets"]
            lastRxPacketsValues[peer] = datapoint["station_dump"][peer]["rx_packets"]

            datapoint["station_dump"][peer]["tx_failed_since_last"] = txFailsSinceLast
            datapoint["station_dump"][peer]["tx_retries_since_last"] = txRetriesSinceLast
            datapoint["station_dump"][peer]["tx_packets_since_last"] = txPacketsSinceLast
            datapoint["station_dump"][peer]["rx_packets_since_last"] = rxPacketsSinceLast

            datapoint["station_dump"][peer]["tx_failed_init"] = initTxFailValues[peer]
            datapoint["station_dump"][peer]["tx_retries_init"] = initTxRetryValues[peer]
            datapoint["station_dump"][peer]["tx_packets_init"] = initTxPacketsValues[peer]
            datapoint["station_dump"][peer]["rx_packets_init"] = initRxPacketsValues[peer]

        results.append(datapoint)
    os.chdir(origPwd)
    return results 

# Takes a directory where keys are router names
# i.e. {"spitz0":[...], "spitz1":[...], ...}
# Where every value is an array of data points that $parseStationDumps output
def newPlotStationDumps(datapoints, figtitle=""):
    fig, axs = plt.subplots(ncols=5, nrows=5)
    # [i.autoscale(enable=True) for i in axs]
    # fig.tight_layout()
    # plt.suptitle(f"{figtitle}")

    for ctr, me in enumerate(datapoints): # Go thru all routers
        rssis = {}
        txFails = {}
        txRetries = {}
        txPackets = {}
        txDiff = {}
        rxPackets = {}
        noise = []

        for datapoint in datapoints[me]: # Go thru all data points for that router
            noise.append(datapoint['noise'])

            # Populate rssis, txfails, txretries. this is based on if 
            # a connection was made with the peer. If no connection, note it down somehow
            for peer in routers: # Go thru all peers in the datapoint

                if peer not in rssis: # Initialize
                    rssis[peer] = []
                    txFails[peer] = []
                    txRetries[peer] = []
                    txPackets[peer] = []
                    rxPackets[peer] = []

                if peer not in datapoint["station_dump"]:
                    # NO CONNECTION WAS MADE
                    rssis[peer].append(-np.Inf)
                    txFails[peer].append(np.Inf)
                    txRetries[peer].append(np.Inf)
                    txPackets[peer].append(np.Inf)
                    rxPackets[peer].append(np.Inf)

                else:
                    # CONNECTION WAS MADE
                    rssis[peer].append(datapoint["station_dump"][peer]["rssi"])

                    # txFails[peer].append(datapoint["station_dump"][peer]["txFailsSinceLast"])
                    # txRetries[peer].append(datapoint["station_dump"][peer]["txRetriesSinceLast"])

                    txFails[peer].append(datapoint["station_dump"][peer]["tx_failed"] - datapoint["station_dump"][peer]["tx_failed_init"])
                    txRetries[peer].append(datapoint["station_dump"][peer]["tx_retries"] - datapoint["station_dump"][peer]["tx_retries_init"])
                    txPackets[peer].append(datapoint["station_dump"][peer]["tx_packets"] - datapoint["station_dump"][peer]["tx_packets_init"])
                    rxPackets[peer].append(datapoint["station_dump"][peer]["rx_packets"] - datapoint["station_dump"][peer]["rx_packets_init"])

        # fig, axs = plt.subplots(ncols=1, nrows=4)
        # [i.autoscale(enable=True) for i in axs]
        # fig.tight_layout()
        # plt.suptitle(f"{me}")

        axs[0][ctr].set_title(me, color=routers[me]['color'], weight='bold', fontsize=22)

        # Now plot them for _this router_ 
        # Plot noise
        # noiseAx = axs[0][ctr]
        # noiseAx.set_title(me)
        # noiseAx.scatter([i for i in range(0, len(noise))], noise)
        # if (ctr == 0):
        #     noiseAx.set_ylabel("Noise (dBm)")
        
        # Plot rssi
        # rssiAx = axs[1][ctr]
        # rssiAx.set_ylim(-50, -100)
        # for peer in routers:
        #     rssiAx.scatter([i for i in range(0, len(rssis[peer]))], rssis[peer], c=routers[peer]["color"], s=2, label=peer)
        # if (ctr == 0):
        #     rssiAx.set_ylabel("RSSI (dBm)")


        # Plot SNR
        snrAx = axs[0][ctr]
        snrAx.set_ylim(-20, 60)
        for peer in routers:
            # pdb.set_trace()
            # [print(rssis[peer][i] - noise[i]) for i in range(0, len(noise))]
            # pdb.set_trace()
            snrAx.scatter([i for i in range(0, len(noise))], [rssis[peer][i]-noise[i] for i in range(0, len(noise))], s=2, label=peer)
        if (ctr == 0):
            snrAx.set_ylabel("SNR (dBm)")


        #
        # Plot Tx Retries
        # txRetryAx = axs[3][ctr]
        # for peer in routers:
        #     txRetryAx.scatter([i for i in range(0, len(txRetries[peer]))], txRetries[peer], c=routers[peer]["color"], s=1, label=peer)
        # txRetryAx.set_ylim(bottom=0)
        # if (ctr == 0):
        #     txRetryAx.set_ylabel("Tx Retry (Packet)")
        # txRetryAx.set_xlabel("Trial")

        # Plot Tx Packets 
        txPacketsAx = axs[1][ctr]
        # txPacketsAx.set_ylim(0, 150000)
        for peer in routers:
            txPacketsAx.scatter([i for i in range(0, len(txPackets[peer]))], txPackets[peer], c=routers[peer]["color"], s=1, label=peer)
        txPacketsAx.set_ylim(bottom=0)
        if (ctr == 0):
            txPacketsAx.set_ylabel("Tx Packets")
        txPacketsAx.set_xlabel("Trial")

        # Plot Rx Packets 
        rxPacketsAx = axs[2][ctr]
        # rxPacketsAx.set_ylim(0, 300000)
        for peer in routers:
            rxPacketsAx.scatter([i for i in range(0, len(rxPackets[peer]))], rxPackets[peer], c=routers[peer]["color"], s=1, label=peer)
        rxPacketsAx.set_ylim(bottom=0)
        if (ctr == 0):
            rxPacketsAx.set_ylabel("Rx Packets")
        rxPacketsAx.set_xlabel("Trial")

        # Plot Tx Fails
        txFailAx = axs[3][ctr]
        # txFailAx.set_ylim(0, 150000)
        for peer in routers:
            txFailAx.scatter([i for i in range(0, len(txFails[peer]))], txFails[peer], c=routers[peer]["color"], s=2, label=peer)
        txFailAx.set_ylim(bottom=0)
        if (ctr == 0):
            txFailAx.set_ylabel("Tx Fail (Packet)")

        # Plot Tx Packets - Tx Fails
        txDiffAx = axs[4][ctr]
        # txDiffAx.set_ylim(0, 150000)
        for peer in routers:
            txDiffAx.scatter([i for i in range(0, len(txFails[peer]))], [txPackets[peer][i] - txFails[peer][i] for i in range(0, len(txFails[peer]))], c=routers[peer]["color"], s=2, label=peer)
        # txDiffAx.set_ylim(0, 150000)
        if (ctr == 0):
            txDiffAx.set_ylabel("Tx Diff (Packet)")

        handles, labels = axs[-1][ctr].get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    fig.tight_layout()
    # plt.show()
    plt.savefig(f"../{figtitle}_consolidated.png")
    return axs

def moving_average(a, n=5):
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n

def newPlotIperf(dirname, figtitle="", average=True, avgWindow=50):
    origPwd = os.getcwd()
    os.chdir(dirname)
    fig, ax = plt.subplots()
    data = []
    transmitter = dirname.split("_")[1]
    receiver = dirname.split("_")[2]
    for filename in os.listdir():
        f = open(filename, "r")
        jsonContents = json.load(f)
        f.close()
        if "error" in jsonContents:
            print("Bad iperf!", jsonContents)
            continue
        trialNum = int(filename.replace(".json", "").split("_")[-1])
        ax.scatter(trialNum, jsonContents["end"]["sum"]["lost_percent"], c="tab:blue", s=20)
        data.append(jsonContents["end"]["sum"]["lost_percent"])
    ax.set_xlabel("Trial")
    ax.set_ylabel("Packet Loss %")
    plt.title(dirname)
    if figtitle != "":
        figtitle += "_"
    plt.savefig(f"../../{figtitle}{dirname}.png")
    if (average):
        avgData = moving_average(data, avgWindow)
        fig, ax = plt.subplots()
        ax.plot([i for i in range(0, len(avgData))], avgData)
        ax.set_xlabel("Trial")
        ax.set_ylabel("Packet Loss % Avg")
        plt.savefig(f"../../average_{figtitle}{dirname}.png")
    os.chdir(origPwd)
    return {"transmitter":transmitter, "receiver":receiver, "data":data}

# Loads up contents of the iperf outputs into one array. returns it
def parseIperf(dirname):
    origPwd = os.getcwd()
    os.chdir(dirname)
    lostPercent = []
    bytesSentData = []
    bytesReceivedData = []
    transmitter = dirname.split("_")[1] # Assumes dirnames in the form of "iperf_spitz0_spitz3" 
    receiver = dirname.split("_")[2]
    for filename in os.listdir():
        f = open(filename, "r")
        try:
            jsonContents = json.load(f)
        except Exception as e:
            print("Bad iperf!", filename)
            continue
        f.close()
        if "error" in jsonContents:
            print("Bad iperf!", jsonContents)
            continue
        trialNum = int(filename.replace(".json", "").split("_")[-1])
        lostPercent.append(jsonContents["end"]["sum"]["lost_percent"])
        bytesSentData.append(jsonContents["end"]["sum_sent"]["bytes"])
        bytesReceivedData.append(jsonContents["end"]["sum_received"]["bytes"])
    os.chdir(origPwd)
    return {"transmitter":transmitter, "receiver":receiver, "lost_percent":lostPercent, "total_lost_percent":sum(lostPercent)/len(lostPercent), "bytes_sent":bytesSentData, "bytes_received":bytesReceivedData}

def plotIperf(data, figtitle=""):
    concat = []
    avgWindow = 50
    totalLostPercent = 0
    totalBytesSent = 0
    totalBytesReceived = 0
    for iperf in data:
        # pdb.set_trace()
        tx = iperf["transmitter"]
        rx = iperf["receiver"]

        fig, ax = plt.subplots()
        ax.scatter([i for i in range(0, len(iperf["lost_percent"]))], iperf["lost_percent"], c="tab:blue", s=20)
        ax.set_xlabel("Trial")
        ax.set_ylabel("Packet Loss %")
        plt.title(f"Iperf {tx} to {rx}")
        plt.savefig(f"../{figtitle}_iperf_{tx}_{rx}.png")

        avgData = moving_average(iperf["lost_percent"], avgWindow)
        fig, ax = plt.subplots()
        ax.plot([i for i in range(0, len(avgData))], avgData)
        ax.set_xlabel("Trial")
        ax.set_ylabel("Packet Loss % Avg")
        plt.title(f"Iperf {tx} to {rx} Avg")
        plt.savefig(f"../average_{figtitle}_iperf_{tx}_{rx}.png")
    
        totalLostPercent += iperf["total_lost_percent"]
        totalBytesSent += sum(iperf["bytes_sent"])
        totalBytesReceived += sum(iperf["bytes_received"])
    
    totalBytesReceivedPercent = 100 * totalBytesReceived / totalBytesSent
    totalLostPercent = totalLostPercent / len(data)
    print(f"Bytes Percent {totalBytesReceivedPercent}")


def main(dirname):
    print("Dirname", dirname)
    # plt.rcParams["figure.figsize"] = (30, 30) # Figure size
    os.chdir(dirname)
    subdirs = sorted(os.listdir("."))

    stationDumpDatapoints = {}
    iperfDatapoints = {}

    # Do the parsing
    iperfData = [] # ugh this is looking awful. another refactoring is probably needed eventually lmao
    for subdir in subdirs:
        if "iperf" not in subdir and "spitz" not in subdir: # omit hidden files which contain run info
            continue

        if "iperf" in subdir:
            print(f"IPERF {os.path.abspath(subdir)}")
            # iperfData.append(newPlotIperf(subdir, figtitle=dirname.replace("/", ""))) # TODO change this with parse iperf. move plotting out of this loop
            iperfData.append(parseIperf(subdir))
        else:
            print(f"STATION DUMP {os.path.abspath(subdir)}")
            # parsed = parseStationDumps(subdir)
            parsed = newParseStationDumps(subdir)
            stationDumpDatapoints[subdir] = parsed


    # pdb.set_trace()
    # Do the plotting
    plt.rcParams["figure.figsize"] = (30, 30) # Figure size
    newPlotStationDumps(stationDumpDatapoints, figtitle=dirname.replace("/",""))
    plotIperf(iperfData, figtitle=dirname.replace("/",""))
    # pprint.pprint(stationDumpDatapoints)

if __name__ == "__main__":
    if (len(sys.argv) != 2):
        print("Error")
        print(usage)
        sys.exit(1)
    main(sys.argv[1])
