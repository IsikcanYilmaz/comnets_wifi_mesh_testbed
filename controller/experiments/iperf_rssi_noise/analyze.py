#!/usr/bin/env python3


usage="""
./analyze.py <dir name> 
Where <dir name> is the directory generated by rssi_noise_deployment.sh
"""

import sys, os, subprocess, json, traceback
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

macs={
    "94:83:c4:a0:23:e2":"spitz0",
    "94:83:c4:a0:21:9a":"spitz1",
    "94:83:c4:a0:21:4e":"spitz2",
    "94:83:c4:a0:23:2e":"spitz3",
    "94:83:c4:a0:1e:a2":"spitz4"
    }

colors={
    "spitz0":"tab:blue", 
    "spitz1":"tab:orange", 
    "spitz2":"tab:green", 
    "spitz3":"tab:brown", 
    "spitz4":"tab:red"
    }

def is_json(filename):
    out = subprocess.check_output(f"file {filename}", shell = True).decode('utf-8').lower()
    if "directory" in out:
        # Hack. if i passed in a directory, find a trial data file and check it
        for i in os.listdir(filename):
            if "trial" in i:
                out = subprocess.check_output(f"file {i}", shell = True).decode('utf-8').lower()
                return ("json" in out)
    return ("json" in out)

def parse_iperf_json(dirname):
    # Datapoint structure:
    # Returns {trial num, pkts lost, pkts total, percentage}
    transmitter = dirname.split("_")[1]
    receiver = dirname.split("_")[2]
    datapoints = []
    origPwd = os.getcwd()
    os.chdir(dirname)
    for filename in sorted(os.listdir()):
        f = open(filename)
        try:
            jsonContents = json.load(f)
        except Exception as e:
            print(f"Bad json file! {f}")
            traceback.print_exception(e)
            f.close()
            continue
        f.close()
        if ("error" in jsonContents):
            print(f"Error in {filename}")
            print(jsonContents["error"])
            continue
        trial_num = int(filename.replace("iperf_", "").split("_")[1])
        streamDict = jsonContents["end"]["sum"]
        numBytes = int(streamDict["bytes"])
        bitsPerSec = float(streamDict["bits_per_second"])
        jitter = float(streamDict["jitter_ms"])
        lostPackets = int(streamDict["lost_packets"])
        numPackets = int(streamDict["packets"])
        lostPacketsPercent = float(streamDict["lost_percent"])

        datapoint = {"trial_num":trial_num, "pkt_lost":lostPackets, "pkt_total":numPackets, "lost_percent":lostPacketsPercent}
        datapoints.append(datapoint)
    os.chdir(origPwd)
    return datapoints       
        
def parse_iperf_raw(dirname):
    # Datapoint structure:
    # Returns {trial num, pkts lost, pkts total, lost percent}
    transmitter = dirname.split("_")[1]
    receiver = dirname.split("_")[2]
    datapoints = []
    origPwd = os.getcwd()
    os.chdir(dirname)
    for filename in sorted(os.listdir()):
        trial_num = int(filename.split("_")[1])
        reftimestamp = float(filename.split("_")[2].replace(",", "."))
        f = open(filename, "r")
        # content = [l.replace("\n", "") for l in f.readlines()]
        for l in f.readlines():
            l = l.replace("\n", "").split()
            if "receiver" in l:
                # print(filename, l)
                pkt_lost = int(l[-3].split("/")[0])
                pkt_total = int(l[-3].split("/")[1])
                lost_percent = float(l[-2][1:-2])
                datapoint = {"trial_num":trial_num, "pkt_lost":pkt_lost, "pkt_total":pkt_total, "lost_percent":lost_percent}
                datapoints.append(datapoint)
                # print(datapoint)
        f.close()
    os.chdir(origPwd)
    return datapoints
    
def plot_iperf(data, figname=""):
    print('plotting iperf', figname)
    fig, ax = plt.subplots()
    for item in data:
        ax.scatter(item["trial_num"], item["lost_percent"], c="tab:blue", s=10)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Packet Loss %")
    plt.title(f"{figname}")
    plt.savefig(f"../iperf_{figname}.png")

def parse_rssi(targetname):
    # Datapoint structure: 
    # returns {trial num, local timestamp, reference timestamp, noiseDBm, rssi = {spitzX:rssi,,,}}
    datapoints = []
    print("Target", targetname)
    origPwd = os.getcwd()
    os.chdir(targetname)
    for datafilename in sorted(os.listdir()):
        namearr = datafilename.split("_")
        trialnum = int(namearr[1])
        reftimestamp = float(namearr[2].replace(",", "."))
        # print(datafilename, trialnum, reftimestamp)
        f = open(datafilename, "r")
        content = [l.replace("\n", "") for l in f.readlines()]
        # content looks like
        # ['1717975049.079514', '-', '94:83:c4:a0:21:4e -78', '94:83:c4:a0:23:e2 -78', '94:83:c4:a0:21:9a -84', '94:83:c4:a0:1e:a2 -67', '-', '-91']
        # print(targetname, datafilename, content)
        if (len(content) == 0):
            print(targetname, datafilename, "BAD FILE!")
            continue
        localtimestamp = float(content[0])
        noise = int(content[-1])
        rssi = {targetname:0}
        for neighbor in [n.split(" ") for n in content[2:-2]]:
            neighborname = macs[neighbor[0]]
            neighborrssi = int(neighbor[1])
            rssi[neighborname] = neighborrssi
        # print(rssi)
        f.close()
        datapoint = {"trial_num":trialnum, 
                     "local_timestamp":localtimestamp, 
                     "reference_timestamp":reftimestamp, 
                     "noise":noise,
                     "rssi":rssi
                     }
        datapoints.append(datapoint)
    os.chdir(origPwd)
    return datapoints

# below plot functions take the aggregated data frame object
def plot_noise(df):
    fig = plt.figure()
    for i in df:
        # i are targets i.e. spitz0, spitz1, etc.
        print(df[i][0])

def plot_rssi(df, plotNoise=True, figname=""):
    # ugh. 
    for me in df: # Go thru each target router
        sortedByTrialNum = sorted(df[me], key = lambda d: d['trial_num'])

        # Get and plot rssis
        rssis = {"spitz0":[], "spitz1":[], "spitz2":[], "spitz3":[], "spitz4":[]} # sorry
        noises = []
        # Go thru each data point, fill the above array with rssi values
        for trial in sortedByTrialNum:
            trialNum = trial["trial_num"]
            noises.append(trial["noise"])
            for peer, rssi in trial["rssi"].items():
                if me == peer:
                    rssis[peer].append(0)
                    continue
                rssis[peer].append(rssi)

        # Plot rssi
        fig, ax = plt.subplots()
        for peer in rssis:
            if peer == me:
                continue
            if len(rssis[me]) != len(rssis[peer]):
                print(me, peer, "no connection")
                continue
            ax.scatter([i for i in range(0, len(rssis[me]))], rssis[peer], c=colors[peer], label=peer, s=5)
        ax.legend(loc="lower left")
        plt.title(f"{me} RSSI Readings {figname}")
        ax.set_ylabel("RSSI (dBm)")
        ax.set_xlabel("Trial")
        ax.set_ylim(0, -100)
        plt.savefig(f"../{me}_rssi_{figname}.png")

        # Plot noise
        if (plotNoise):
            fig, ax = plt.subplots()
            plt.title(f"{me} Noise Readings {figname}")
            ax.set_ylabel("Noise (dBm)")
            ax.set_xlabel("Trial")
            ax.scatter([i for i in range(0, len(noises))], noises)
            plt.savefig(f"../{me}_noise_{figname}.png")

def main(dirname):
    print("Dirname", dirname)
    plt.rcParams["figure.figsize"] = (10,10) # Figure size
    os.chdir(dirname)
    subdirs = sorted(os.listdir("."))
    aggregatedRssi = {}
    aggregatedIperf = {}
    for i in subdirs:
        if ".config" in i:
            continue
        if "iperf" in i:
            if is_json(i):
                parsediperf = parse_iperf_raw(i)
            else:
                parsediperf = parse_iperf_json(i)
            plot_iperf(parsediperf, f"{i.replace('/', '')}_{dirname.replace('/','')}")
        else:
            parsedtarget = parse_rssi(i)
            aggregatedRssi[i] = parsedtarget
            plot_rssi(aggregatedRssi, True, dirname.replace("/",""))

if __name__ == "__main__":
    if (len(sys.argv) != 2):
        print("Error")
        print(usage)
        sys.exit(1)
    main(sys.argv[1])
