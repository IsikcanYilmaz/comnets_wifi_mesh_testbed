#!/usr/bin/env python3

usage="""
./consolidated_analyze.py <dir name> 
Where <dir name> is the directory generated by rssi_noise_deployment.sh
The consolidated subdirectory must be there
"""

import sys, os, subprocess, json, traceback, argparse
import pprint
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from k_means import consolidateParse 

import predictor

import pdb

from pandas._libs.tslibs import astype_overflowsafe

machines = {
    # Routers below here
    "spitz0":{
        "mac":"94:83:c4:a0:23:e2",
        "color":"tab:blue",
        "type":"router"
    },
    "spitz1":{
        "mac":"94:83:c4:a0:21:9a",
        "color":"tab:orange",
        "type":"router"
    },
    "spitz2":{
        "mac":"94:83:c4:a0:21:4e",
        "color":"tab:green",
        "type":"router"
    },
    "spitz3":{
        "mac":"94:83:c4:a0:23:2e",
        "color":"tab:brown",
        "type":"router"
    },
    "spitz4":{
        "mac":"94:83:c4:a0:1e:a2",
        "color":"tab:red",
        "type":"router"
    },
    # Tx Machines Below here
    "nuc0":{
        "mac":"a0:c5:89:8d:81:64",
        "color":"tab:black",
        "type":"txbox"
    },
}

# UTILS ###############################
def moving_average(a, n=5):
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n

def moving_variance(a, n=5):
    pass

def remove_errors(a, errors):
    for i in reversed(errors):
        print(f"removing index {i}")
        a.pop(i)
    return a

# PARSERS AND PLOTTERS ################
def plotIperfLoss(data, tx="", rx="", figtitle="", averageWindow=50, routesHistogram=None):
    fig, ax = plt.subplots()
    ax.scatter([i for i in range(0, len(data))], data, c="tab:blue", s=20)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Packet Loss %")
    plt.title(f"Iperf {tx} to {rx} pkt loss")
    plt.savefig(f"../analysis/losspercent_{tx}_{rx}_{figtitle}.png")
    if (routesHistogram):
        for e, route in enumerate(routesHistogram):
            for i in routesHistogram[route]["trials"]:
                plt.axvspan(i, i+1, facecolor=f'0.{(e+1) * 20}', alpha=0.8)
        ax.scatter([i for i in range(0, len(data))], data, c="tab:blue", s=20)
        plt.savefig(f"../analysis/routes_losspercent_{tx}_{rx}_{figtitle}.png")

    # Average
    fig, ax = plt.subplots()
    avgData = moving_average(data, averageWindow)
    ax.plot([i for i in range(0, len(avgData))], avgData, c="tab:blue")
    ax.set_xlabel("Trial")
    ax.set_ylabel("Packet Loss %")
    plt.title(f"{averageWindow} Average Iperf {tx} to {rx} Pkt Loss")
    plt.savefig(f"../analysis/average_losspercent_{tx}_{rx}_{figtitle}.png")
    plt.close()

def plotSeconds(data, tx="", rx="", figtitle=""):
    fig, ax = plt.subplots()
    ax.scatter([i for i in range(0, len(data))], data, c="tab:blue", s=20)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Seconds")
    plt.title(f"Seconds {tx} to {rx}")
    plt.savefig(f"../analysis/seconds_{tx}_{rx}_{figtitle}.png")
    plt.close()

def plotLossVsSeconds(loss, seconds, tx="", rx="", figtitle=""):
    fig, ax = plt.subplots()
    ax.scatter(loss, seconds, c="tab:blue", s=10)
    ax.set_xlabel("Loss")
    ax.set_ylabel("Seconds")
    plt.title(f"Loss vs Seconds {tx} to {rx}")
    plt.savefig(f"../analysis/loss_vs_seconds_{tx}_{rx}_{figtitle}.png")
    plt.close()

def plotLossVsHops(loss, hops, tx="", rx="", figtitle=""):
    fig, ax = plt.subplots()
    ax.scatter(loss, hops, c="tab:blue", s=10)
    ax.set_xlabel("Loss")
    ax.set_ylabel("Hops")
    plt.title(f"Loss vs Hops {tx} to {rx}")
    plt.savefig(f"../analysis/loss_vs_hops_{tx}_{rx}_{figtitle}.png")
    plt.close()

def plotBitrateSentReceived(sent, received, tx="", rx="", figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    ax.scatter([i for i in range(0, len(sent))], sent, c="tab:blue", s=1, label="Sent")
    ax.scatter([i for i in range(0, len(sent))], received, c="tab:red", s=1, label="Received")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    ax.set_xlabel("Trial")
    ax.set_ylabel("Bitrate")
    plt.title(f"Bitrate {tx} to {rx}")
    plt.savefig(f"../analysis/{figtitle}_bitrate_sent_received_{tx}_{rx}.png")

    # Average
    fig, ax = plt.subplots()
    avgSent = moving_average(sent, averageWindow)
    avgReceived = moving_average(received, averageWindow)
    ax.plot([i for i in range(0, len(avgSent))], avgSent, c="tab:blue", label="Tx Bitrate")
    ax.plot([i for i in range(0, len(avgReceived))], avgReceived, c="tab:red", label="Rx Bitrate")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    ax.set_xlabel("Trial")
    ax.set_ylabel("Bitrate")
    plt.title(f"{averageWindow} Average Bitrate {tx} to {rx}")
    plt.savefig(f"../analysis/average_bitrate_sent_received_{tx}_{rx}_{figtitle}.png")
    plt.close()
    print(f"Max Rx bitrate {max(received)}")

def plotBitrateAndDrops(bitrate, loss, tx="", rx="", figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    normalBitrate = [i/max(bitrate) for i in bitrate]
    normalLoss = [i/max(loss) for i in loss]

    averageLoss = moving_average(loss, averageWindow)

    averageNormalBitrate = moving_average(normalBitrate, averageWindow)
    averageNormalLoss = moving_average(normalLoss, averageWindow)
    
    ax.plot([i for i in range(0, len(averageNormalLoss))], averageNormalLoss, c="tab:blue", label="Loss")
    ax.plot([i for i in range(0, len(averageNormalBitrate))], averageNormalBitrate, c="tab:red", label="Bitrate")
    ax.set_xlabel("Trial")
    ax.set_ylabel("Loss & Bitrate, normalized")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"Loss & Bitrate {tx} to {rx}")
    plt.savefig(f"../analysis/average_bitrate_loss_{tx}_{rx}_{figtitle}.png")

    correl = np.corrcoef(bitrate, loss)
    print(f"Correl between bitrate and loss tx {tx} rx {rx}")
    print(correl[0][1])

    correl = np.corrcoef(averageNormalBitrate, averageNormalLoss)
    print(f"Correl between avg bitrate and loss tx {tx} rx {rx}")
    print(correl[0][1])

    plt.close()

def plotAllTxPackets(allTxPackets, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in allTxPackets:
        data = allTxPackets[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("All Tx Packets")
    # ax.set_yscale('log')
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"All Tx Packets")
    plt.savefig(f"../analysis/all_tx_packets_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in allTxPackets:
        data = moving_average([y-x for x, y in zip(allTxPackets[me], allTxPackets[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("All Tx Packets")
    # ax.set_yscale('log')
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average All Tx Packets Per Iteration")
    plt.savefig(f"../analysis/average_all_tx_packets_per_iter_{figtitle}.png")
    plt.close()

def plotSumPerStationTxPackets(sumPerStationTxPackets, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in sumPerStationTxPackets:
        data = sumPerStationTxPackets[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Sum Per Station Tx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"Sum Per Station Tx Packets")
    plt.savefig(f"../analysis/{figtitle}_sum_per_station_tx_packets.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in sumPerStationTxPackets:
        data = moving_average([y-x for x, y in zip(sumPerStationTxPackets[me], sumPerStationTxPackets[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Sum Per Station Tx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average Sum Per Station Tx Packets Per Iteration")
    plt.savefig(f"../analysis/average_sum_per_station_tx_packets_per_iter_{figtitle}.png")
    plt.close()

def plotSnr(snr, figtitle="", averageWindow=50, loss=[]):
    fig, axs = plt.subplots(ncols=1, nrows=5)
    for i, me in enumerate(snr):
        for peer in snr[me]:
            data = snr[me][peer]
            if (len(data) == 0):
                continue
            axs[i].set_ylim(-10, 50)
            axs[i].scatter([i for i in range(0, len(data))], data, c=machines[peer]["color"], label=peer, s=5)
            axs[i].set_ylabel(f"{me} SNR (dBm)", color=machines[me]['color'], weight='bold', fontsize=10)
            if (i == 4):
                axs[i].set_xlabel("Trial")
            if (len(loss) != 0):
                correl = np.corrcoef(data, loss)
                print(f"Correl between SNR of {me}-{peer} and loss: {correl[0][1]}")
                # print(correl)
    handles, labels = axs[0].get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.tight_layout()
    plt.savefig(f"../analysis/snr_{figtitle}.png")

    print("")

    # Average
    fig, axs = plt.subplots(ncols=1, nrows=5)
    for i, me in enumerate(snr):
        for peer in snr[me]:
            data = snr[me][peer]
            if (len(data) == 0):
                continue
            avgData = moving_average(data, averageWindow)
            axs[i].set_ylim(-10, 50)
            axs[i].scatter([i for i in range(0, len(avgData))], avgData, c=machines[peer]["color"], label=peer, s=5)
            axs[i].set_ylabel(f"{me} SNR (dBm)", color=machines[me]['color'], weight='bold', fontsize=10)
            if (i == 4):
                axs[i].set_xlabel("Trial")
            if (len(loss) != 0):
                correl = np.corrcoef(avgData, moving_average(loss, averageWindow))
                print(f"Correl between SNR of {me}-{peer} and loss. Average win {averageWindow}: {correl[0][1]}")
                # print(correl)
    handles, labels = axs[0].get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.tight_layout()
    plt.savefig(f"../analysis/average_snr_{figtitle}.png")
    plt.close()

def analyzeSnrPktlossCorrel(snr, loss):
    pass

def plotBatmanMgmtTx(mgmtTx, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in mgmtTx:
        data = mgmtTx[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Mgmt Tx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Mgmt Tx Packets")
    plt.savefig(f"../analysis/average_batman_mgmt_tx_packets_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in mgmtTx:
        data = moving_average([y-x for x, y in zip(mgmtTx[me], mgmtTx[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Mgmt Tx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Mgmt Tx Packets Per Iteration")
    plt.savefig(f"../analysis/average_batman_mgmt_tx_packets_per_iter_{figtitle}.png")
    plt.close()

def correlBatmanMgmtTxPktLoss(mgmtTx, loss):
    import IPython
    IPython.embed()
    # correl = np.corrcoef(mgmtTx, loss)

def plotBatmanMgmtRx(mgmtRx, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in mgmtRx:
        data = mgmtRx[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Mgmt Rx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"BATMAN Mgmt Rx Packets")
    plt.savefig(f"../analysis/batman_mgmt_rx_packets_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in mgmtRx:
        data = moving_average([y-x for x, y in zip(mgmtRx[me], mgmtRx[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel(f"Mgmt Rx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Mgmt Rx Packets Per Iteration")
    plt.savefig(f"../analysis/average_batman_mgmt_rx_packets_per_iter_{figtitle}.png")
    plt.close()

def plotBatmanMgmtTxBytes(mgmtTxBytes, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in mgmtTxBytes:
        data = mgmtTxBytes[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Mgmt Tx Bytes")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"BATMAN Mgmt Tx Bytes")
    plt.savefig(f"../analysis/batman_mgmt_tx_bytes_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in mgmtTxBytes:
        data = moving_average([y-x for x, y in zip(mgmtTxBytes[me], mgmtTxBytes[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("BATMAN Mgmt Tx Bytes")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Mgmt Tx Bytes Per Iteration")
    plt.savefig(f"../analysis/average_batman_mgmt_tx_bytes_per_iter_{figtitle}.png")
    plt.close()

def plotBatmanMgmtRxBytes(mgmtRxBytes, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in mgmtRxBytes:
        data = mgmtRxBytes[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Mgmt Rx Bytes")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"BATMAN Mgmt Rx Bytes")
    plt.savefig(f"../analysis/batman_mgmt_rx_bytes_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in mgmtRxBytes:
        data = moving_average([y-x for x, y in zip(mgmtRxBytes[me], mgmtRxBytes[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Mgmt Rx Bytes")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Mgmt Rx Bytes Per Iteration")
    plt.savefig(f"../analysis/average_batman_mgmt_rx_bytes_per_iter_{figtitle}.png")
    plt.close()

def plotBatmanForward(forward, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in forward:
        data = forward[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Forwarded Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"Forwarded Packets")
    plt.savefig(f"../analysis/forward_pkts_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in forward:
        data = moving_average([y-x for x, y in zip(forward[me], forward[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Forwarded Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Forwarded Packets Per Iteration")
    plt.savefig(f"../analysis/average_forward_pkts_per_iter_{figtitle}.png")
    plt.close()

def plotBatmanForwardBytes(forwardBytes, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in forwardBytes:
        data = forwardBytes[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("Forwarded Bytes")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"Forwarded Bytes")
    plt.savefig(f"../analysis/forward_bytes_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in forwardBytes:
        data = moving_average([y-x for x, y in zip(forwardBytes[me], forwardBytes[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel(f"Forwarded Bytes")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average Forwarded Bytes Per Iteration")
    plt.savefig(f"../analysis/average_forward_bytes_per_iter_{figtitle}.png")
    plt.close()

def plotBatmanTx(batmanTx, batmanForward=None, batmanMgmt=None, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    if (batmanForward):
        for router in batmanTx:
            batmanTx[router] = [i + j for i, j in zip(batmanForward[router], batmanTx[router])]
    if (batmanMgmt):
        for router in batmanTx:
            batmanTx[router] = [i + j for i, j in zip(batmanMgmt[router], batmanTx[router])]
    for me in batmanTx:
        data = batmanTx[me]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
        if (batmanForward):
            data = batmanForward[me]
            ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=f"{me} forward", linestyle="dashdot")
        if (batmanMgmt):
            data = batmanMgmt[me]
            ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=f"{me} mgmt", linestyle="dotted")
    ax.set_xlabel("Trial")
    ax.set_ylabel("BATMAN Tx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"BATMAN Tx Packets")
    plt.savefig(f"../analysis/batman_tx_packets_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in batmanTx:
        data = moving_average([y-x for x, y in zip(batmanTx[me], batmanTx[me][1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
        if (batmanForward):
            data = moving_average([y-x for x, y in zip(batmanForward[me], batmanForward[me][1:])], averageWindow)
            ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=f"{me} forward", linestyle="dashdot")
        if (batmanMgmt):
            data = moving_average([y-x for x, y in zip(batmanMgmt[me], batmanMgmt[me][1:])], averageWindow)
            ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=f"{me} mgmt", linestyle="dotted")
    ax.set_xlabel("Trial")
    ax.set_ylabel("BATMAN Tx Packets")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Tx Packets Per Iteration")
    plt.savefig(f"../analysis/average_batman_tx_packets_per_iter_{figtitle}.png")
    plt.close()

def plotBatmanTxDiff(batmanTx, batmanMgmtTx, figtitle="", averageWindow=50):
    fig, ax = plt.subplots()
    for me in batmanTx:
        data = [x - y for x, y in zip(batmanTx[me], batmanMgmtTx[me])]
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], [i - data[0] for i in data], c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("BATMAN Tx Diff")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"BATMAN Tx Diff")
    plt.savefig(f"../analysis/batman_tx_diff_{figtitle}.png")

    # Per iteration
    fig, ax = plt.subplots()
    for me in batmanTx:
        data = [x - y for x, y in zip(batmanTx[me], batmanMgmtTx[me])]
        data = moving_average([y-x for x, y in zip(data, data[1:])], averageWindow)
        if len(data) == 0:
            continue
        ax.plot([i for i in range(0, len(data))], data, c=machines[me]["color"], label=me)
    ax.set_xlabel("Trial")
    ax.set_ylabel("BATMAN Tx Diff")
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.title(f"{averageWindow} Average BATMAN Tx Diff Per Iteration")
    plt.savefig(f"../analysianalysisaverage_batman_tx_diff_per_iter_{figtitle}.png")
    plt.close()

def singleHopCorrel(snr, loss, figtitle="", averageWindow=50):
    fig, axs = plt.subplots()
    for i, me in enumerate(snr):
        for peer in snr[me]:
            data = snr[me][peer]
            if (len(data) == 0):
                continue
            axs.set_ylim(-10, 50)
            axs.scatter([i for i in range(0, len(data))], data, c=machines[peer]["color"], label=peer, s=5)
            axs.set_ylabel(f"{me} SNR (dBm)", color=machines[me]['color'], weight='bold', fontsize=10)

            # pdb.set_trace()
            axs.scatter([i for i in range(0, len(data))], loss, label="loss percent", c="black", s=5)
            if (i == 4):
                axs.set_xlabel("Trial")
            if (len(loss) != 0):
                correl = np.corrcoef(data, loss)
                print(f"Correl between SNR of {me}-{peer} and loss: {correl[0][1]}")
                # print(correl)
    handles, labels = axs.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.tight_layout()
    plt.savefig(f"../analysis/loss_snr_{figtitle}.png")

    print("")

    # Average
    fig, axs = plt.subplots()
    for i, me in enumerate(snr):
        for peer in snr[me]:
            data = snr[me][peer]
            if (len(data) == 0):
                continue
            avgData = moving_average(data, averageWindow)
            axs.set_ylim(-10, 50)
            axs.scatter([i for i in range(0, len(avgData))], avgData, c=machines[peer]["color"], label=peer, s=5)
            axs.set_ylabel(f"{me} SNR (dBm)", color=machines[me]['color'], weight='bold', fontsize=10)

            avgLoss = moving_average(loss, averageWindow)
            axs.scatter([i for i in range(0, len(avgLoss))], avgLoss, label="loss percent", s=5, c="black")
            if (i == 4):
                axs.set_xlabel("Trial")
            if (len(loss) != 0):
                correl = np.corrcoef(avgData, moving_average(loss, averageWindow))
                print(f"Correl between SNR of {me}-{peer} and loss. Average win {averageWindow}: {correl[0][1]}")
                # print(correl)
    handles, labels = axs.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper right')
    plt.tight_layout()
    plt.savefig(f"../analysis/average_loss_snr_{figtitle}.png")
    plt.close()

    print("")

    fig, ax = plt.subplots()
    snrData = snr["spitz0"]["spitz4"]
    for winIdx in range(0, len(loss)-averageWindow):
        snrWindow = snrData[winIdx:winIdx+averageWindow]
        lossWindow = loss[winIdx:winIdx+averageWindow]
        correl = np.corrcoef(snrWindow, lossWindow)
        avgSnr = sum(snrWindow)/len(snrWindow)
        avgLoss = sum(lossWindow)/len(lossWindow)
        ax.scatter(winIdx, correl[0][1], c="black")
        print(f"window idx {winIdx} correl {correl[0][1]}, avgSnr {avgSnr} avgLoss {avgLoss}")
    ax.set_xlabel("Trial")
    ax.set_ylabel("Correl")
    plt.show()

def plotLostPercentHistogram(lostPercent, bins=10, figtitle=""):
    fig, ax = plt.subplots()
    n, bins, patches = ax.hist(lostPercent, bins=bins)
    print("Lost percent histogram")
    for i, j in enumerate(n):
        print(f"Bin {i} : {j} elements")
    plt.savefig(f"../analysis/lostpercent_histogram_{figtitle}.png")

def parseConsolidatedFiles(dirname, start=None, end=None, averageWindow=500):
    origPwd = os.curdir
    os.chdir(f"{dirname}/consolidated/")
    li = sorted(os.listdir("."))
    trials = []

    totalBytesReceivedPercent = 0
    totalBytesSent = 0
    totalBytesReceived = 0

    totalAllTxPackets = 0
    totalSumPerStationPackets = 0

    # Plots that I want
    rx = "" # Assuming this doesnt change
    lostPercent = {i:[] for i in machines}
    seconds = {i:[] for i in machines}
    iperfNumHops = {i:[] for i in machines}
    bitrateSent = {i:[] for i in machines}
    bitrateReceived = {i:[] for i in machines}

    # RSSI / SNR
    rssi = {i:{j:[] for j in machines} for i in machines}
    snr = {i:{j:[] for j in machines} for i in machines}

    rssiWithoutIperfErrors = {i:{j:[] for j in machines} for i in machines}
    snrWithoutIperfErrors = {i:{j:[] for j in machines} for i in machines}

    noise = {i:[] for i in machines}
    txPackets = {i:{j:[] for j in machines} for i in machines}
    txRetries = {i:{j:[] for j in machines} for i in machines}
    txFails = {i:{j:[] for j in machines} for i in machines}
    rxPackets = {i:{j:[] for j in machines} for i in machines}
    txPacketsPerIter = {i:{j:[] for j in machines} for i in machines}
    txRetriesPerIter = {i:{j:[] for j in machines} for i in machines}
    txFailsPerIter = {i:{j:[] for j in machines} for i in machines}
    rxPacketsPerIter = {i:{j:[] for j in machines} for i in machines}

    # Tx packets
    allTxPackets = {i:[] for i in machines}
    sumPerStationTxPackets = {i:[] for i in machines}
    overheadPackets = {i:[] for i in machines}

    firstAllTxPackets = {i:0 for i in machines}
    firstSumPerStationTxPackets = {i:0 for i in machines}
    firstOverheadPackets = {i:0 for i in machines}

    # Batman stats
    # batmanMgmtTx = {i:[] for i in machines}
    # batmanMgmtRx = {i:[] for i in machines}
    # batmanForwardPkts = {i:[] for i in machines}
    #
    # batmanMgmtTxBytes = {i:[] for i in machines}
    # batmanMgmtRxBytes = {i:[] for i in machines}
    # batmanForwardBytes = {i:[] for i in machines}
    #
    # batmanTx = {i:[] for i in machines}
    # batmanTxBytes = {i:[] for i in machines}
    # batmanTxDropped = {i:[] for i in machines}
    #
    # batmanOgmInterval = {i:[] for i in machines}
    
    badIperfIndices = []

    # Routes
    routes = []
    routesEncoded = [];
    routesHistogram = {};

    for filename in li:
        # Read file
        f = open(filename, "r")
        try:
            jsonContents = json.load(f)
        except Exception as e:
            print(f"Error loading json. {filename}")
            traceback.print_exc()
            f.close()
            continue
        f.close()
        
        trialNum = jsonContents["trial"]

        # If start or end limits are set
        if (start != None and trialNum < start) or (end != None and trialNum > end):
            continue

        # Add contents to respective arrays / dicts
        # Iperf
        iperfErrored = False
        for iperf in jsonContents["iperf"]:
            if "error" in iperf["results"]:
                print(f"File {filename} has error {iperf['results']['error']} ")
                badIperfIndices.append(trialNum)
                iperfErrored = True
                continue
            tx = iperf["transmitter"]
            rx = iperf["receiver"]
            results = iperf["results"]["end"]
            route = iperf["route"]
            numHops = len(route)

            lostPercent[tx].append(results["sum"]["lost_percent"])
            seconds[tx].append(results["sum"]["seconds"])
            bitrateReceived[tx].append(results["sum_received"]["bits_per_second"])
            bitrateSent[tx].append(results["sum_sent"]["bits_per_second"])
            iperfNumHops[tx].append(numHops)
            routes.append(route)

            routeStr = "".join(route)
            if (routeStr not in routesHistogram):
                routesHistogram[routeStr] = {"count":1, "lost": results["sum_received"]["lost_packets"], "trials":[trialNum]}
            else:
                routesHistogram[routeStr]["count"] += 1
                routesHistogram[routeStr]["lost"] += results["sum_received"]["lost_packets"]
                routesHistogram[routeStr]["trials"].append(trialNum)

            totalBytesSent += results["sum_sent"]["bytes"]
            totalBytesReceived += results["sum_received"]["bytes"]

        # RSSI / SNR / L2 stuff
        for me in jsonContents["station_dump"]:
            if (jsonContents["station_dump"][me] == {}):
                continue
            meStationDump = jsonContents["station_dump"][me]
            # meBatmanStats = meStationDump["batman_stats"]
            noise[me].append(meStationDump["noise"])

            if firstSumPerStationTxPackets[me] == 0:
                firstSumPerStationTxPackets[me] = meStationDump["sum_per_station_tx_packets"]
            if firstAllTxPackets[me] == 0:
                firstAllTxPackets[me] = meStationDump["all_tx_packets"]
            if firstOverheadPackets[me] == 0:
                firstOverheadPackets[me] = meStationDump["all_tx_packets"] - meStationDump["sum_per_station_tx_packets"]

            allTxPackets[me].append(meStationDump["all_tx_packets"] - firstAllTxPackets[me])
            sumPerStationTxPackets[me].append(meStationDump["sum_per_station_tx_packets"] - firstSumPerStationTxPackets[me])
            overheadPackets[me].append(meStationDump["all_tx_packets"] - meStationDump["sum_per_station_tx_packets"])

            # batmanMgmtTx[me].append(meBatmanStats["mgmt_tx"])
            # batmanMgmtRx[me].append(meBatmanStats["mgmt_rx"])
            # batmanForwardPkts[me].append(meBatmanStats["forward_pkts"])
            # batmanForwardBytes[me].append(meBatmanStats["forward_bytes"])
            # batmanMgmtTxBytes[me].append(meBatmanStats["mgmt_tx_bytes"])
            # batmanMgmtRxBytes[me].append(meBatmanStats["mgmt_rx_bytes"])
            # batmanTx[me].append(meBatmanStats["tx"])
            # batmanTxBytes[me].append(meBatmanStats["tx_bytes"])
            # batmanTxDropped[me].append(meBatmanStats["tx_dropped"])
            # batmanOgmInterval[me].append(meBatmanStats["ogm_interval"])

            for peer in meStationDump["station_dump"]: # bad lookin i know
                peerStationDump = meStationDump["station_dump"][peer]
                rssi[me][peer].append(peerStationDump["rssi"])
                snr[me][peer].append(peerStationDump["snr"])
                txPackets[me][peer].append(peerStationDump["tx_packets"])
                txFails[me][peer].append(peerStationDump["tx_failed"])
                txRetries[me][peer].append(peerStationDump["tx_retries"])
                rxPackets[me][peer].append(peerStationDump["rx_packets"])

                if (not iperfErrored):
                    rssiWithoutIperfErrors[me][peer].append(peerStationDump["rssi"])
                    snrWithoutIperfErrors[me][peer].append(peerStationDump["snr"])

        trials.append(jsonContents)

    # totalBytesReceivedPercent = (totalBytesReceived * 100 / totalBytesSent)

    for i in lostPercent: # for all transmitters 
        if len(lostPercent[i]) == 0:
            continue
        plotIperfLoss(lostPercent[i], tx=i, rx=rx, figtitle=f"{dirname}", averageWindow=averageWindow, routesHistogram=routesHistogram)
        plotSeconds(seconds[i], tx=i, rx=rx, figtitle=f"{dirname}")
        plotLossVsSeconds(lostPercent[i], seconds[i], tx=i, rx=rx, figtitle=f"{dirname}")
        plotBitrateSentReceived(bitrateSent[i], bitrateReceived[i], tx=i, rx=rx, figtitle=f"{dirname}", averageWindow=averageWindow)
        plotBitrateAndDrops(bitrateReceived[i], lostPercent[i], tx=i, rx=rx, figtitle=f"{dirname}", averageWindow=averageWindow)
        # plotLossVsHops(lostPercent[i], iperfNumHops[i], tx=i, rx=rx, figtitle=f"{dirname}")

    plotAllTxPackets(allTxPackets, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotSumPerStationTxPackets(sumPerStationTxPackets, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanMgmtTx(batmanMgmtTx, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanMgmtRx(batmanMgmtRx, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanTx(batmanTx, batmanForward=batmanForwardPkts, batmanMgmt=batmanMgmtTx, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanTx(batmanTx, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanTxDiff(batmanTx, batmanMgmtTx, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanMgmtTxBytes(batmanMgmtTxBytes, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanMgmtRxBytes(batmanMgmtRxBytes, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanForward(batmanForwardPkts, figtitle=f"{dirname}", averageWindow=averageWindow)
    # plotBatmanForwardBytes(batmanForwardBytes, figtitle=f"{dirname}", averageWindow=averageWindow)
    
    # singleHopCorrel(snrWithoutIperfErrors, lostPercent["nuc0"], figtitle=f"{dirname}", averageWindow=averageWindow)

    for i in routesHistogram:
        routesHistogram[i]["lost"] = routesHistogram[i]["lost"] / routesHistogram[i]["count"]

    # plotSnr(snrWithoutIperfErrors, figtitle=f"{dirname}", loss=bitrateReceived["nuc0"], averageWindow=averageWindow)
    plotSnr(snrWithoutIperfErrors, figtitle=f"{dirname}", averageWindow=averageWindow)
    plotLostPercentHistogram(lostPercent["nuc0"], bins=50, figtitle=f"{dirname}")

    # Print final / total statistics
    print("")
    print(f"Total bytes received percent {totalBytesReceivedPercent}")
    print(f"Total bytes sent {totalBytesSent}")
    print(f"Total bytes received {totalBytesReceived}")
    print(f"Total all Tx packets {totalAllTxPackets}")
    print(f"Total sum per station packets {totalSumPerStationPackets}")
    print(f"Routes")
    for route in routesHistogram:
        print(f"{route} : {routesHistogram[route]['count']} , {routesHistogram[route]['lost']}")
    print(f"Errored iperfs {len(badIperfIndices)}")

    # pdb.set_trace()
    # import IPython
    # IPython.embed()
    os.chdir(origPwd)

# MAIN ################################
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("dirname")
    parser.add_argument("--start", type=int)
    parser.add_argument("--end", type=int)
    parser.add_argument("--avgwin", type=int, default=100)
    args = parser.parse_args()
    print(args)
    plt.rcParams["figure.figsize"] = (15, 10) # Figure size
    dirname = args.dirname
    dirname = dirname.replace("/","") # HACK? this slash breaks things
    try:
        os.mkdir(f"{dirname}/analysis/")
    except FileExistsError:
        pass
    print(f"Dirname {dirname}/consolidated/")
    parseConsolidatedFiles(dirname, start=args.start, end=args.end, averageWindow=args.avgwin)

if __name__ == "__main__":
    if (len(sys.argv) < 2):
        print("Error")
        print(usage)
        sys.exit(1)
    main()
